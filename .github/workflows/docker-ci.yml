name: Build And Deploy

on:
  push:
    branches:
    #   - 'master'
      - 'feature/migrate-to-aws'    
    # tags:
    #   - 'v*'
  # pull_request:
  #   branches:
  #     - 'master'

jobs:
  conditional_job_check_files:
    runs-on: 'ubuntu-20.04'
    # Declare outputs for next jobs
    outputs:
      dockerfile_base_changed: ${{ steps.check_file_changed.outputs.dockerfile_base_changed }}
    steps:
    - uses: actions/checkout@v2
      with:
        # Checkout as many commits as needed for the diff
        fetch-depth: 2
    - shell: pwsh
      id: check_file_changed
      run: |
        # Diff HEAD with the previous commit
        $diff = git diff --name-only HEAD^ HEAD

        # Check if Dockerfile.base was changed
        $SourceDiff = $diff | Where-Object { $_ -match 'Dockerfile' }
        $HasDiff = $SourceDiff.Length -gt 0

        # Set the output named "dockerfile_base_changed"
        Write-Host "::set-output name=dockerfile_base_changed::$HasDiff"

  build-base:
    name: Build Base
    needs: [ conditional_job_check_files ]
    runs-on: ubuntu-20.04
    if: needs.conditional_job_check_files.outputs.dockerfile_base_changed == 'True'
    steps:
    - uses: actions/checkout@v2

    - name: Buildevents
      uses: kvrhdn/gha-buildevents@v1
      with:
        apikey: ${{ secrets.BUILDEVENTS_APIKEY }}
        dataset: continuous-deployment
        job-status: ${{ job.status }}
        matrix-key: ${{ matrix.value }}

    # Build-Base-Step-0-prep-variables
    - run: |
        echo "STEP_ID=0" >> $GITHUB_ENV
        echo "STEP_START=$(date +%s)" >> $GITHUB_ENV
    - id: prep
      run: |
        TAG=$(echo $GITHUB_SHA | head -c7)
        IMAGE="registry.aws.abraham.fun/abraham-ai/eden-base"
        echo ::set-output name=tagged_image::${IMAGE}:${TAG}
        echo ::set-output name=tag::${TAG}
        echo ::set-output name=image::${IMAGE}         
    - run: |
        buildevents step $TRACE_ID $STEP_ID $STEP_START 'prep-variables'

    # Build-Base-Step-1-login-docker
    - run: |
        echo "STEP_ID=1" >> $GITHUB_ENV
        echo "STEP_START=$(date +%s)" >> $GITHUB_ENV
    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'       
      uses: docker/login-action@v1
      with:
          registry: registry.aws.abraham.fun
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
    - run: |
        buildevents step $TRACE_ID $STEP_ID $STEP_START 'login-docker'          

    # Build-Base-Step-2-build-and-push
    - run: |
        echo "STEP_ID=2" >> $GITHUB_ENV
        echo "STEP_START=$(date +%s)" >> $GITHUB_ENV
    - name: Build and Push
      uses: docker/build-push-action@v2
      with:
        context: .
        file: Dockerfile.base
        push: true #${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.prep.outputs.tagged_image }}, ${{ steps.prep.outputs.image }}:latest
    - run: |
        buildevents step $TRACE_ID $STEP_ID $STEP_START 'build-and-push'   

  build:
    name: Build
    needs: [ build-base ]
    runs-on: ubuntu-20.04
    outputs:
      tag: ${{ steps.prep.outputs.tag }}

    steps:
    - uses: actions/checkout@v2

    - name: Buildevents
      uses: kvrhdn/gha-buildevents@v1
      with:
        apikey: ${{ secrets.BUILDEVENTS_APIKEY }}
        dataset: continuous-deployment
        job-status: ${{ job.status }}
        matrix-key: ${{ matrix.value }}

    # Build-Step-0-prep-variables
    - run: |
        echo "STEP_ID=0" >> $GITHUB_ENV
        echo "STEP_START=$(date +%s)" >> $GITHUB_ENV
    - id: prep
      run: |
        TAG=$(echo $GITHUB_SHA | head -c7)
        IMAGE="registry.aws.abraham.fun/abraham-ai/eden-clip"
        echo ::set-output name=tagged_image::${IMAGE}:${TAG}
        echo ::set-output name=tag::${TAG}
        echo ::set-output name=image::${IMAGE}         
    - run: |
        buildevents step $TRACE_ID $STEP_ID $STEP_START 'prep-variables'

    # Build-Step-1-login-docker
    - run: |
        echo "STEP_ID=1" >> $GITHUB_ENV
        echo "STEP_START=$(date +%s)" >> $GITHUB_ENV
    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'       
      uses: docker/login-action@v1
      with:
          registry: registry.aws.abraham.fun
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
    - run: |
        buildevents step $TRACE_ID $STEP_ID $STEP_START 'login-docker'          

    # Build-Step-2-build-and-push
    - run: |
        echo "STEP_ID=2" >> $GITHUB_ENV
        echo "STEP_START=$(date +%s)" >> $GITHUB_ENV
    - name: Build and Push
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true #${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.prep.outputs.tagged_image }},${{ steps.prep.outputs.image }}:latest
    - run: |
        buildevents step $TRACE_ID $STEP_ID $STEP_START 'build-and-push'              

  deploy:
    name: Deploy
    runs-on: ubuntu-20.04
    needs: build

    steps:
      - name: Buildevents
        uses: kvrhdn/gha-buildevents@v1
        with:
          apikey: ${{ secrets.BUILDEVENTS_APIKEY }}
          dataset: continuous-deployment
          job-status: ${{ job.status }}
          matrix-key: ${{ matrix.value }}

      - name: Check out releases repo
        uses: actions/checkout@v2
        with:
          repository: abraham-ai/releases
          ref: feature/eden ######### CHANGEME
          token: ${{ secrets.ONE1ZERO1ONE_PAT }}
      
      # Deploy-Step-0-prep-variables
      - run: |
          echo "STEP_ID=0" >> $GITHUB_ENV
          echo "STEP_START=$(date +%s)" >> $GITHUB_ENV
      - id: prep
        run: |
          IMAGE="registry.aws.abraham.fun/abraham-ai/eden-clip"
          echo ::set-output name=tagged_image::${IMAGE}:${{ needs.build.outputs.tag }}
          echo ::set-output name=tag::${{ needs.build.outputs.tag }}
          echo ::set-output name=image::${IMAGE}         
      - run: |
          buildevents step $TRACE_ID $STEP_ID $STEP_START 'prep-variables'          

      # Deploy-Step-1-bump-up-eden-staging
      - run: |
          echo "STEP_ID=1" >> $GITHUB_ENV
          echo "STEP_START=$(date +%s)" >> $GITHUB_ENV      


      - name: Bump up eden-staging image
        run: |
          buildevents cmd $TRACE_ID $STEP_ID sed -- sed -i -E "s@registry\.aws\.abraham\.fun\/abraham-ai\/eden-clip:.*@${{ steps.prep.outputs.tagged_image }}@" apps/eden/eden-clip-stg/deployment-eden-clip.yaml
      - run: |
          buildevents step $TRACE_ID $STEP_ID $STEP_START 'bump-up-eden-staging'       

      # Deploy-Step-2-commit-to-releases
      - run: |
          echo "STEP_ID=2" >> $GITHUB_ENV
          echo "STEP_START=$(date +%s)" >> $GITHUB_ENV      
      - name: Commit files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "Abraham Releases"
          git commit -am "Bump eden-staging"
      - run: |
          buildevents step $TRACE_ID $STEP_ID $STEP_START 'commit-to-releases'               
      
      # Deploy-Step-2-push-releases
      - run: |
          echo "STEP_ID=3" >> $GITHUB_ENV
          echo "STEP_START=$(date +%s)" >> $GITHUB_ENV     
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          repository: abraham-ai/releases
          branch: feature/eden ########## CHANGEME
          github_token: ${{ secrets.ONE1ZERO1ONE_PAT }} 
      - run: |
          buildevents step $TRACE_ID $STEP_ID $STEP_START 'push-releases'

      # here I somehow should wait until argo says ok OR 1 minute passed OR
      # i could send the trace ID and argo could continue the trace ?          